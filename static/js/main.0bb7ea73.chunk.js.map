{"version":3,"sources":["components/header/Header.js","components/dashboard/Poster.js","api/apiUtils.js","constants/index.js","components/dashboard/DashboardContainer.js","api/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","onSearch","Navbar","bg","variant","className","Brand","href","Form","inline","onSubmit","FormControl","type","placeholder","Button","Poster","poster","isBright","isMobile","style","backgroundImage","thumbnailUrl","url","title","prototype","PropTypes","shape","albumId","number","isRequired","id","string","bool","handleResponse","response","a","ok","json","status","text","error","Error","handleError","console","DashboardContainer","searchName","useState","data","setData","page","setPage","useEffect","fetch","then","catch","result","sort","b","reddish","log","getRGB","el","str","split","rgb","length","r","slice","g","pages","constants","showPage","filter","includes","map","key","window","innerWidth","bottom","right","onClick","Spinner","width","height","top","innerHeight","left","animation","role","App","setSearchName","e","preventDefault","target","children","value","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0bb7ea73.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nconst Header = ({ onSearch }) => (\r\n  <Navbar bg=\"dark\" variant=\"dark\" className=\"fixed-top\">\r\n    <Navbar.Brand href=\"/\" className=\"mr-auto\">\r\n      Mini Task\r\n    </Navbar.Brand>\r\n    <Form inline onSubmit={onSearch}>\r\n      <FormControl\r\n        type=\"text\"\r\n        placeholder=\"Search by Name\"\r\n        className=\"mr-sm-2\"\r\n      />\r\n      <Button variant=\"outline-info\" type=\"submit\">\r\n        Search\r\n      </Button>\r\n    </Form>\r\n  </Navbar>\r\n);\r\n\r\nHeader.propTypes = {\r\n  onSearch: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Poster = ({ poster, isBright, isMobile }) => (\r\n  <div\r\n    className=\"poster m-2\"\r\n    style={{\r\n      backgroundImage: `url(${isMobile ? poster.thumbnailUrl : poster.url})`\r\n    }}\r\n  >\r\n    {isMobile ? (\r\n      <p className={isBright ? \"text-dark\" : \"text-light\"}>{poster.title}</p>\r\n    ) : (\r\n      <h4 className={isBright ? \"text-dark\" : \"text-light\"}>{poster.title}</h4>\r\n    )}\r\n  </div>\r\n);\r\n\r\nPoster.prototype = {\r\n  poster: PropTypes.shape({\r\n    albumId: PropTypes.number.isRequired,\r\n    id: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired,\r\n    thumbnailUrl: PropTypes.string.isRequired\r\n  }),\r\n  isBright: PropTypes.bool.isRequired,\r\n  isMobile: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default Poster;\r\n","export async function handleResponse(response) {\r\n  if (response.ok) return response.json();\r\n  if (response.status === 400) {\r\n    // So, a server-side validation error occurred.\r\n    // Server side validation returns a string error message, so parse as text instead of json.\r\n    const error = await response.text();\r\n    throw new Error(error);\r\n  }\r\n  throw new Error(\"Network response was not ok.\");\r\n}\r\n\r\n// In a real app, would likely call an error logging service.\r\nexport function handleError(error) {\r\n  // eslint-disable-next-line no-console\r\n  console.error(\"API call failed. \" + error);\r\n  throw error;\r\n}\r\n","export default {\r\n  pageVolume: 30\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Poster from \"./Poster\";\r\nimport * as api from \"../../api\";\r\nimport constants from \"../../constants\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\n\r\nconst DashboardContainer = ({ searchName }) => {\r\n  const [data, setData] = useState([]);\r\n  const [page, setPage] = useState(0);\r\n\r\n  useEffect(() => {\r\n    api\r\n      .getData()\r\n      .then(result => {\r\n        result.sort((a, b) => reddish(a) - reddish(b));\r\n        setData(result);\r\n      })\r\n      .catch(error => {\r\n        console.log(\"Api call error \" + error);\r\n        throw error;\r\n      });\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const getRGB = el => {\r\n    const str = el.url.split(\"/\");\r\n    const rgb = str[str.length - 1];\r\n    const r = rgb.slice(0, 2) || \"00\";\r\n    const g = rgb.slice(2, 4) || \"00\";\r\n    const b = rgb.slice(4, 6) || \"00\";\r\n\r\n    return { r, g, b };\r\n  };\r\n\r\n  const reddish = el => {\r\n    const rgb = getRGB(el);\r\n\r\n    return +(\"0x\" + rgb.r) - +(\"0x\" + rgb.g) - +(\"0x\" + rgb.b);\r\n  };\r\n\r\n  const isBright = el => {\r\n    const rgb = getRGB(el);\r\n\r\n    return (+(\"0x\" + rgb.r) + +(\"0x\" + rgb.g) + +(\"0x\" + rgb.b)) / 3 > 80;\r\n  };\r\n\r\n  const showPage = data => {\r\n    const pages = (data.length / constants.pageVolume) >> 0;\r\n    return data.slice(page * pages, page * pages + constants.pageVolume);\r\n  };\r\n\r\n  const isMobile = () => window.innerWidth < 576;\r\n\r\n  return (\r\n    <>\r\n      {data.length > 0 ? (\r\n        <>\r\n          <div className=\"d-flex justify-content-center flex-wrap mt-5 p-3\">\r\n            {showPage(\r\n              searchName\r\n                ? data.filter(el => el.title.includes(searchName))\r\n                : data\r\n            ).map((poster, id) => (\r\n              <Poster\r\n                key={id}\r\n                poster={poster}\r\n                isBright={isBright(poster)}\r\n                isMobile={isMobile()}\r\n              />\r\n            ))}\r\n          </div>\r\n          <Button\r\n            variant=\"primary\"\r\n            className=\"position-fixed\"\r\n            style={{ bottom: 20, right: 20 }}\r\n            onClick={() => setPage(page + 1)}\r\n          >\r\n            Show More\r\n          </Button>\r\n        </>\r\n      ) : (\r\n        <Spinner\r\n          variant=\"primary\"\r\n          className=\"position-fixed\"\r\n          style={{\r\n            width: 60,\r\n            height: 60,\r\n            top: window.innerHeight / 2 - 30,\r\n            left: window.innerWidth / 2 - 30\r\n          }}\r\n          animation=\"border\"\r\n          role=\"status\"\r\n        >\r\n          <span className=\"sr-only\">Loading...</span>\r\n        </Spinner>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nDashboardContainer.propTypes = {\r\n  searchName: PropTypes.string\r\n};\r\n\r\nexport default DashboardContainer;\r\n","import { handleResponse, handleError } from \"./apiUtils\";\r\nconst baseUrl = \"https://jsonplaceholder.typicode.com/photos\";\r\n\r\nexport function getData() {\r\n  return fetch(baseUrl)\r\n    .then(handleResponse)\r\n    .catch(handleError);\r\n}\r\n","import React, { useState } from \"react\";\nimport \"./App.scss\";\nimport Header from \"./components/header/Header\";\nimport DashboardContainer from \"./components/dashboard/DashboardContainer\";\n\nconst App = () => {\n  const [searchName, setSearchName] = useState(\"\");\n\n  return (\n    <>\n      <Header\n        onSearch={e => {\n          e.preventDefault();\n          setSearchName(e.target.children[0].value);\n        }}\n      />\n      <DashboardContainer searchName={searchName} />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}